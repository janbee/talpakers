{"version":3,"file":"static/js/978.015e48db.chunk.js","mappings":"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","sources":["app/components/users/users.component.tsx","app/shared/component/element-loader.component.tsx"],"sourcesContent":["import React, { FormEvent, memo, useCallback, useMemo } from \"react\";\nimport \"./users.component.scss\";\nimport {\n  Checkbox,\n  CheckboxProps,\n  Icon,\n  Progress,\n  Segment,\n  Table,\n} from \"semantic-ui-react\";\nimport {\n  GetColor,\n  GetDates,\n  Money,\n  useApi,\n  useCallbackMemo,\n} from \"@utilities/utils\";\nimport { UserDetailModel } from \"@models/custom.models\";\nimport { API } from \"@services/api.service\";\nimport moment from \"moment\";\nimport { Outlet, useNavigate } from \"react-router-dom\";\nimport { ElementComponent } from \"@app/shared/component/element-loader.component\";\nimport classNames from \"classnames\";\nimport UseAnimations from \"react-useanimations\";\nimport activity from \"react-useanimations/lib/activity\";\nimport alertCircle from \"react-useanimations/lib/alertCircle\";\nimport star from \"react-useanimations/lib/star\";\n\nenum Status {\n  IsDone,\n  InProgress,\n  IsWaiting,\n}\n\ninterface CustomUserModel extends UserDetailModel {\n  checked?: boolean;\n}\n\nexport const UsersComponent = memo(() => {\n  const state = useApi<CustomUserModel[]>(() => API.getUsers(), {\n    withLoading: false,\n  });\n\n  const accounts = useMemo<CustomUserModel[]>(() => {\n    return [];\n  }, []);\n\n  const currentLocation = JSON.stringify(window.location.href);\n  const navigate = useNavigate();\n\n  const handleUserDetails = useCallbackMemo(\n    (user: CustomUserModel) => {\n      accounts.length = 0;\n      user.checked = true;\n      accounts.push(user);\n      navigate(`@${user._id}`, {\n        relative: \"route\",\n        replace: currentLocation.includes(\"@\"),\n      });\n    },\n    [navigate],\n  );\n\n  const handleSetAccounts = useCallback(\n    (event: FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n      event.stopPropagation();\n      const user = JSON.parse(data.value as string) as CustomUserModel;\n\n      const foundUser = accounts.find((item) => item.build === user.build);\n      if (foundUser) {\n        foundUser.checked = data.checked;\n      } else {\n        user.checked = data.checked;\n        accounts.push(user);\n      }\n\n      const emails = accounts\n        .filter((item) => item.checked === true)\n        .map((item) => item._id)\n        .join(\",\");\n\n      navigate(emails?.length === 0 ? \"\" : `@${emails}`, {\n        relative: \"route\",\n        replace: currentLocation.includes(\"@\"),\n      });\n    },\n    [accounts, currentLocation, navigate],\n  );\n\n  const selected = currentLocation\n    .replaceAll('\"', \"\")\n    .split(\"/\")\n    .pop()\n    ?.replace(\"@\", \"\");\n\n  const getInProgressUsersCount = useMemo(() => {\n    return (\n      state.data?.filter((user) => {\n        const inProgress = user.data?.weekStatus?.done === false;\n        const lastUpdate = moment(user.updatedAt || user.createdAt);\n        const duration = moment.duration(lastUpdate.diff(Date.now()));\n        const minutesPassed = Math.abs(duration.asMinutes());\n        return inProgress && minutesPassed < 30;\n      })?.length || 0\n    );\n  }, [state.data]);\n\n  return (\n    <div\n      className={classNames({\n        \"users-wrap\": true,\n      })}\n    >\n      <Segment inverted>\n        <div className=\"ttl\">\n          <div>\n            <span>Users</span>\n            {!!accounts.length && (\n              <span>({accounts.filter((item) => item.checked).length})</span>\n            )}\n          </div>\n          <Icon\n            size={\"small\"}\n            className={\"pointer\"}\n            onClick={state.reload}\n            name=\"refresh\"\n          />\n        </div>\n        <hr />\n        <div className=\"tbl-wrap\">\n          <Table celled striped selectable inverted compact>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell className={\"multi-select\"} textAlign=\"center\">\n                  #\n                </Table.HeaderCell>\n                <Table.HeaderCell>App</Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"center\" name={\"status\"}>\n                  Status{\" \"}\n                  {!!getInProgressUsersCount && `#${getInProgressUsersCount}`}\n                </Table.HeaderCell>\n                <Table.HeaderCell>Version</Table.HeaderCell>\n\n                <Table.HeaderCell\n                  className={\"weekly-summary\"}\n                  textAlign=\"center\"\n                >\n                  Weekly Summary\n                  <br />\n                  (Bonus + Earnings = Total)\n                </Table.HeaderCell>\n                <Table.HeaderCell\n                  className={\"weekly-progress\"}\n                  textAlign=\"center\"\n                >\n                  Weekly Progress\n                </Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"center\">OpenBets</Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"center\">\n                  SettledBets\n                </Table.HeaderCell>\n                <Table.HeaderCell className={\"last-update\"} textAlign=\"right\">\n                  Active\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {state.data?.map((user, index) => {\n                const { weekStart } = GetDates();\n\n                const isDone = user.data?.weekStatus?.done === true;\n                const inProgress = user.data?.weekStatus?.done === false;\n\n                const lastUpdate = moment(user.updatedAt || user.createdAt);\n                const duration = moment.duration(lastUpdate.diff(Date.now()));\n                const minutesPassed = Math.abs(duration.asMinutes());\n                let isIdle = false;\n                if (inProgress && minutesPassed >= 30) {\n                  isIdle = true;\n                }\n\n                const waiting =\n                  weekStart.toISOString() !== user.data?.weekStatus?.startDate;\n\n                let totalStaked =\n                  user.data?.weekStatus?.betSummary?.betSummary.totalStaked ||\n                  0;\n                let totalEarnings =\n                  user.data?.weekStatus?.betSummary?.betSummary.totalEarnings ||\n                  0;\n                let bonus =\n                  user.data?.weekStatus?.betSummary?.betSummary.bonus || 0;\n                let winnings =\n                  user.data?.weekStatus?.betSummary?.betSummary.winnings || 0;\n\n                if (waiting) {\n                  totalStaked = 0;\n                  totalEarnings = 0;\n                  bonus = 0;\n                  winnings = 0;\n                }\n\n                const isWaiting =\n                  waiting ||\n                  isIdle ||\n                  user.data?.weekStatus?.done === undefined;\n\n                const bgColor =\n                  minutesPassed > 30\n                    ? GetColor(29)\n                    : GetColor(Math.floor(minutesPassed));\n\n                const checkedUsed = accounts.find(\n                  (item) => item.build === user.build,\n                );\n\n                const selectedUsers = accounts\n                  .filter((item) => item.checked)\n                  .map((item) => item.build);\n\n                const emailArr = selected?.split(\",\") || [];\n\n                const status = isDone\n                  ? Status.IsDone\n                  : isWaiting\n                  ? Status.IsWaiting\n                  : Status.InProgress;\n\n                return (\n                  <Table.Row\n                    className={classNames({\n                      selected:\n                        selectedUsers.includes(user.build) ||\n                        emailArr.includes(user._id),\n                    })}\n                    key={user._id}\n                    onClick={handleUserDetails(user)}\n                  >\n                    <Table.Cell\n                      selectable\n                      className={\"multi-select\"}\n                      textAlign=\"center\"\n                    >\n                      <Checkbox\n                        value={JSON.stringify(user)}\n                        checked={!!checkedUsed?.checked}\n                        onChange={handleSetAccounts}\n                      />\n                    </Table.Cell>\n                    <Table.Cell collapsing>\n                      <span>{user.build}</span>\n                    </Table.Cell>\n                    <Table.Cell\n                      collapsing\n                      textAlign=\"center\"\n                      className={\"status\"}\n                    >\n\n                      {!state.loading && [status].map((s, statusInd) => {\n                        let animation = star;\n                        let color = \"greenyellow\";\n                        if (s === Status.InProgress) {\n                          animation = activity;\n                          color = \"#fbbd08\";\n                        } else if (s === Status.IsWaiting) {\n                          animation = alertCircle;\n                          color = \"#ff5f5f\";\n                        }\n                        return (\n                          <UseAnimations\n                            key={statusInd}\n                            animation={animation}\n                            size={25}\n                            autoplay={true}\n                            strokeColor={color}\n                            loop={true}\n                          />\n                        );\n                      })}\n                    </Table.Cell>\n                    <Table.Cell collapsing>{user.data?.version}</Table.Cell>\n\n                    <Table.Cell textAlign=\"center\" className={\"week-summary\"}>\n                      <div className={\"week-summary-wrap\"}>\n                        <span\n                          className={classNames({\n                            win: bonus > 0,\n                            lose: bonus < 0,\n                          })}\n                        >\n                          {Money(bonus)}\n                        </span>\n                        {\" + \"}\n                        <span\n                          className={classNames({\n                            win: totalEarnings > 0,\n                            lose: totalEarnings < 0,\n                          })}\n                        >\n                          {Money(totalEarnings)}\n                        </span>\n                        {\" = \"}\n                        <span\n                          className={classNames({\n                            win: winnings > 0,\n                            lose: winnings < 0,\n                          })}\n                        >\n                          {Money(winnings)}\n                        </span>\n                      </div>\n                    </Table.Cell>\n                    <Table.Cell textAlign=\"right\" className={\"progress\"}>\n                      <Progress\n                        indicating\n                        inverted\n                        success={\n                          user.data?.weekStatus?.done === true &&\n                          totalStaked !== 0\n                        }\n                        precision={0}\n                        value={Math.floor(totalStaked)}\n                        progress={\"percent\"}\n                        total={385}\n                        label={Money(totalStaked)}\n                      />\n                    </Table.Cell>\n                    <Table.Cell textAlign=\"center\" className={\"open-bets\"}>\n                      {user.data.weekStatus?.betSummary?.betSummary.openBets}\n                    </Table.Cell>\n                    <Table.Cell textAlign=\"center\" className={\"settled-bets\"}>\n                      {user.data.weekStatus?.betSummary?.betSummary.settledBets}\n                    </Table.Cell>\n                    <Table.Cell textAlign=\"right\" className={\"last-login\"}>\n                      <span style={{ color: bgColor }}>\n                        {lastUpdate.fromNow()}\n                      </span>\n                    </Table.Cell>\n                  </Table.Row>\n                );\n              })}\n            </Table.Body>\n\n            <Table.Footer>\n              <Table.Row>\n                <Table.HeaderCell colSpan=\"100\">\n                  Total Users {state.data?.length}\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Footer>\n          </Table>\n        </div>\n        <ElementComponent loading={state.loading} />\n      </Segment>\n      <Outlet />\n    </div>\n  );\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface Props {\n  loading: boolean;\n  content?: string;\n}\n\nclass State {\n  loading = false;\n  content? = \"\";\n\n  constructor(props: Props) {\n    this.loading = props.loading;\n    this.content = props.content;\n  }\n}\n\nexport const ElementComponent = (props: Props) => {\n  const [state, setState] = useState<State>(new State(props));\n\n  useEffect(() => {\n    setState((prevState) => ({ ...prevState, loading: props.loading }));\n  }, [props.loading]);\n\n  return (\n    <Dimmer\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n      {...(state.loading ? { active: true } : {})}\n    >\n      <Loader />\n    </Dimmer>\n  );\n};\n"],"names":["Status","UsersComponent","memo","_currentLocation$repl","_state$data2","_state$data3","state","useApi","API","getUsers","withLoading","accounts","useMemo","currentLocation","JSON","stringify","window","location","href","navigate","useNavigate","handleUserDetails","useCallbackMemo","user","length","checked","push","concat","_id","relative","replace","includes","handleSetAccounts","useCallback","event","data","stopPropagation","parse","value","foundUser","find","item","build","emails","filter","map","join","selected","replaceAll","split","pop","getInProgressUsersCount","_state$data","_state$data$filter","_user$data","_user$data$weekStatus","inProgress","weekStatus","done","lastUpdate","moment","updatedAt","createdAt","duration","diff","Date","now","minutesPassed","Math","abs","asMinutes","_jsxs","className","classNames","children","Segment","inverted","_jsx","Icon","size","onClick","reload","name","Table","celled","striped","selectable","compact","Header","Row","HeaderCell","textAlign","Body","index","_user$data2","_user$data2$weekStatu","_user$data3","_user$data3$weekStatu","_user$data4","_user$data4$weekStatu","_user$data5","_user$data5$weekStatu","_user$data5$weekStatu2","_user$data6","_user$data6$weekStatu","_user$data6$weekStatu2","_user$data7","_user$data7$weekStatu","_user$data7$weekStatu2","_user$data8","_user$data8$weekStatu","_user$data8$weekStatu2","_user$data9","_user$data9$weekStatu","_user$data10","_user$data11","_user$data11$weekStat","_user$data$weekStatus2","_user$data$weekStatus3","_user$data$weekStatus4","_user$data$weekStatus5","weekStart","GetDates","isDone","isIdle","waiting","toISOString","startDate","totalStaked","betSummary","totalEarnings","bonus","winnings","isWaiting","undefined","bgColor","GetColor","floor","checkedUsed","selectedUsers","emailArr","status","IsDone","IsWaiting","InProgress","Cell","Checkbox","onChange","collapsing","loading","s","statusInd","animation","star","color","activity","alertCircle","UseAnimations","autoplay","strokeColor","loop","version","win","lose","Money","Progress","indicating","success","precision","progress","total","label","openBets","settledBets","style","fromNow","Footer","colSpan","ElementComponent","Outlet","State","_createClass","props","_classCallCheck","content","this","_useState","useState","_useState2","_slicedToArray","setState","useEffect","prevState","_objectSpread","Dimmer","position","top","left","right","bottom","active","Loader"],"sourceRoot":""}