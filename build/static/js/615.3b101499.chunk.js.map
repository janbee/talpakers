{"version":3,"file":"static/js/615.3b101499.chunk.js","mappings":"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","sources":["app/components/user-details/user-details.component.tsx","app/shared/component/element-loader.component.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\nimport \"./user-details.component.scss\";\nimport { Header, Segment } from \"semantic-ui-react\";\nimport { EarningsModel } from \"@models/custom.models\";\nimport { API } from \"@services/api.service\";\nimport { ElementComponent } from \"@app/shared/component/element-loader.component\";\nimport { groupBy, sumBy } from \"lodash\";\nimport moment from \"moment\";\nimport { useLocation } from \"react-router-dom\";\nimport { Money } from \"@utilities/utils\";\nimport classNames from \"classnames\";\n\nclass State {\n  loading = false;\n  list: { title: string; data: EarningsModel[] }[] = [];\n}\n\nexport const UserDetailsComponent = memo(() => {\n  const { pathname } = useLocation();\n  const email = pathname.split(\"/\").pop()?.replace(\"@\", \"\");\n  const [state, setState] = useState<State>(new State());\n\n  useEffect(() => {\n    setState((prevState) => ({ ...prevState, loading: true }));\n    API.getSettledBets({ email }).subscribe((res) => {\n      console.log(\"gaga-----------------------------------getSettledBets--\");\n      const dataList = Array.from(Array(moment().isoWeeksInYear()).keys()).map(\n        (weekNumber) => {\n          const year = moment().format(\"YYYY\");\n          const date = moment(year).add(weekNumber, \"weeks\");\n          const mon = moment(date).format(\"MMM\");\n          const monNumber = moment(date).format(\"M\");\n          const startDate = moment(date)\n            .startOf(\"week\")\n            .add(1, \"day\")\n            .toISOString();\n          const endDate = moment(date).endOf(\"week\").toISOString();\n\n          const weekStart = new Date(startDate);\n          const weekEnd = new Date(endDate);\n          weekStart.setUTCHours(0, 0, 0, 0);\n          weekEnd.setUTCHours(23, 59, 59, 999);\n\n          const bets = res?.filter((item) => {\n            return (\n              item.startDate === weekStart.toISOString() &&\n              item.endDate === weekEnd.toISOString()\n            );\n          });\n\n          let bonus = 0;\n          let totalStaked = 0;\n          let totalEarnings = 0;\n          let winnings = 0;\n          if (bets?.length) {\n            const totalStaked = sumBy(bets, (bet) => {\n              return sumBy(bet.details, \"s\");\n            });\n            const totalWinnings = sumBy(bets, (bet) => {\n              return sumBy(bet.details, \"w\");\n            });\n            bonus = Math.floor(totalStaked / 75) * 10;\n\n            totalEarnings = totalWinnings - totalStaked;\n            bonus = bonus > 50 ? 50 : bonus;\n\n            winnings = bonus + totalEarnings;\n          }\n\n          return {\n            _id: `${mon}-${weekNumber}`,\n            mon: monNumber + \"-\" + mon,\n            year,\n            startDate: weekStart.toISOString(),\n            endDate: weekEnd.toISOString(),\n            bonus,\n            totalStaked,\n            totalEarnings,\n            winnings,\n            loading: false,\n            fetch: 0,\n            title: mon,\n          };\n        },\n      );\n      const groupedDataList = groupBy(dataList, \"mon\");\n      const defaultList = Object.keys(groupedDataList).map((key) => {\n        return {\n          title: key.split(\"-\")[1],\n          data: groupedDataList[key] as unknown as EarningsModel[],\n        };\n      });\n\n      console.log(\"gaga-------------------------------------\", defaultList);\n\n      setState((prevState) => ({\n        ...prevState,\n        loading: false,\n        list: defaultList,\n      }));\n    });\n  }, []);\n\n  return (\n    <div className=\"user-details-wrap\">\n      <Segment inverted>\n        <div className=\"ttl\">{email}</div>\n\n        <div className=\"user-details-content-wrap\">\n          {state.list.map((mon) => {\n            const total = sumBy(mon.data, \"winnings\");\n            return (\n              <div key={mon.title} className=\"mon-wrap\">\n                <div className=\"ttl-wrap\">\n                  <Header as=\"h3\" inverted>\n                    {mon.title}\n                  </Header>\n                  <Header\n                    className={classNames({\n                      winnings: total > 0,\n                      losses: total < 0,\n                    })}\n                    as=\"h4\"\n                    inverted\n                  >\n                    {Money(total)}\n                  </Header>\n                </div>\n                <hr />\n                <div className=\"week-wrap\">\n                  {mon.data.map((item) => {\n                    return (\n                      <div key={item._id} className=\"week\">\n                        <div className=\"week-date\">\n                          <span>\n                            {moment(item.startDate).utc().format(\"ddd DD\")} -{\" \"}\n                            {moment(item.endDate).utc().format(\"ddd DD\")}\n                          </span>\n                        </div>\n                        <div className=\"week-content\">\n                          <div className=\"row-wrap\">\n                            <span>Staked</span>\n                            <span>{Money(item.totalStaked)}</span>\n                          </div>\n                          <div className=\"row-wrap\">\n                            <span>Earnings</span>\n                            <span>{Money(item.totalEarnings)}</span>\n                          </div>\n                          <div className=\"row-wrap\">\n                            <span>Bonus</span>\n                            <span>{Money(item.bonus)}</span>\n                          </div>\n                          <div className=\"row-wrap\">\n                            <span>Winnings</span>\n                            <span\n                              className={classNames({\n                                winnings: item.winnings > 0,\n                                losses: item.winnings < 0,\n                              })}\n                            >\n                              {Money(item.winnings)}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <ElementComponent loading={state.loading} />\n      </Segment>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface Props {\n  loading: boolean;\n  content?: string;\n}\n\nclass State {\n  loading = false;\n  content? = \"\";\n\n  constructor(props: Props) {\n    this.loading = props.loading;\n    this.content = props.content;\n  }\n}\n\nexport const ElementComponent = (props: Props) => {\n  const [state, setState] = useState<State>(new State(props));\n\n  useEffect(() => {\n    setState((prevState) => ({ ...prevState, loading: props.loading }));\n  }, [props.loading]);\n\n  return (\n    <Dimmer\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n      {...(state.loading ? { active: true } : {})}\n    >\n      <Loader />\n    </Dimmer>\n  );\n};\n"],"names":["State","_createClass","_classCallCheck","loading","list","UserDetailsComponent","memo","_pathname$split$pop","email","useLocation","pathname","split","pop","replace","_useState","useState","_useState2","_slicedToArray","state","setState","useEffect","prevState","_objectSpread","API","getSettledBets","subscribe","res","console","log","dataList","Array","from","moment","isoWeeksInYear","keys","map","weekNumber","year","format","date","add","mon","monNumber","startDate","startOf","toISOString","endDate","endOf","weekStart","Date","weekEnd","setUTCHours","bets","filter","item","bonus","totalEarnings","winnings","length","totalStaked","sumBy","bet","details","totalWinnings","Math","floor","_id","concat","fetch","title","groupedDataList","groupBy","defaultList","Object","key","data","_jsx","className","children","_jsxs","Segment","inverted","total","Header","as","classNames","losses","Money","utc","ElementComponent","props","content","this","Dimmer","style","position","top","left","right","bottom","active","Loader"],"sourceRoot":""}