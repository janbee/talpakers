{"version":3,"file":"static/js/978.6d882b83.chunk.js","mappings":"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","sources":["app/components/users/users.component.tsx","app/shared/component/element-loader.component.tsx"],"sourcesContent":["import React, { FormEvent, memo, SyntheticEvent, useCallback, useMemo } from 'react';\nimport './users.component.scss';\nimport { Checkbox, CheckboxProps, Dropdown, DropdownProps, Icon, Progress, Segment, Table } from 'semantic-ui-react';\nimport { GetColor, GetUserStatus, Money, useApi, useCallbackMemo, UserStatus } from '@utilities/utils';\nimport { UserDetailModel } from '@models/custom.models';\nimport { API } from '@services/api.service';\nimport moment from 'moment';\nimport { Outlet, useNavigate } from 'react-router-dom';\nimport { ElementComponent } from '@app/shared/component/element-loader.component';\nimport classNames from 'classnames';\nimport UseAnimations from 'react-useanimations';\nimport activity from 'react-useanimations/lib/activity';\nimport alertCircle from 'react-useanimations/lib/alertCircle';\nimport star from 'react-useanimations/lib/star';\nimport { orderBy } from 'lodash';\n\ninterface CustomUserModel extends UserDetailModel {\n  checked?: boolean;\n}\n\nexport const UsersComponent = memo(() => {\n  const [state, setState] = useApi<CustomUserModel[]>(() => API.getUsers(), {\n    withLoading: false,\n  });\n\n  const accounts = useMemo<CustomUserModel[]>(() => {\n    return [];\n  }, []);\n\n  /*\n   * commit\n   * */\n  const currentLocation = JSON.stringify(window.location.href);\n  const navigate = useNavigate();\n\n  const handleUserDetails = useCallbackMemo(\n    (user: CustomUserModel) => {\n      accounts.length = 0;\n      user.checked = true;\n      accounts.push(user);\n      navigate(`@${user._id}`, {\n        relative: 'route',\n        replace: currentLocation.includes('@'),\n      });\n    },\n    [navigate],\n  );\n\n  const handleSetAccounts = useCallback(\n    (event: FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n      event.stopPropagation();\n      const user = JSON.parse(data.value as string) as CustomUserModel;\n\n      const foundUser = accounts.find((item) => item.build === user.build);\n      if (foundUser) {\n        foundUser.checked = data.checked;\n      } else {\n        user.checked = data.checked;\n        accounts.push(user);\n      }\n\n      const emails = accounts\n        .filter((item) => item.checked === true)\n        .map((item) => item._id)\n        .join(',');\n\n      navigate(emails?.length === 0 ? '' : `@${emails}`, {\n        relative: 'route',\n        replace: currentLocation.includes('@'),\n      });\n    },\n    [accounts, currentLocation, navigate],\n  );\n\n  const selected = currentLocation\n    .replaceAll('\"', '')\n    .split('/')\n    .pop()\n    ?.replace('@', '');\n\n  const getInProgressUsersCount = useMemo(() => {\n    return (\n      state.data?.filter((user) => {\n        const inProgress = user.data?.weekStatus?.done === false;\n        const lastUpdate = moment(user.updatedAt || user.createdAt);\n        const duration = moment.duration(lastUpdate.diff(Date.now()));\n        const minutesPassed = Math.abs(duration.asMinutes());\n        return inProgress && minutesPassed < 30;\n      })?.length || 0\n    );\n  }, [state.data]);\n\n  const handleStatusFilter = useCallback(\n    (event: SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => {\n      const sorted = orderBy(state.data, [(user) => {\n        const userStatus = GetUserStatus(user);\n        return userStatus === data.value;\n      }, 'data.weekStatus.betSummary.betSummary.totalStaked'], ['desc', 'desc']);\n      setState((prevState) => ({ ...prevState, data: sorted }));\n    },\n    [state.data],\n  );\n\n  return (\n    <div\n      className={classNames({\n        'users-wrap': true,\n      })}\n    >\n      <Segment inverted>\n        <div className='ttl'>\n          <div>\n            <span>Users</span>\n            {!!accounts.length && (\n              <span>({accounts.filter((item) => item.checked).length})</span>\n            )}\n          </div>\n          <Icon\n            size={'small'}\n            className={'pointer'}\n            onClick={state.reload}\n            name='refresh'\n          />\n        </div>\n        <hr />\n        <div className='tbl-wrap'>\n          <Table\n            celled\n            striped\n            selectable\n            inverted\n            compact>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell\n                  className={'multi-select'}\n                  textAlign='center'>\n                  #\n                </Table.HeaderCell>\n                <Table.HeaderCell>App</Table.HeaderCell>\n                <Table.HeaderCell\n                  textAlign='center'\n                  className={'status'}>\n                  <Dropdown\n                    text='Status'\n                    closeOnChange={false}\n                    onChange={handleStatusFilter}\n                    options={[\n                      {\n                        key: UserStatus.IsDone,\n                        value: UserStatus.IsDone,\n                        text: 'Done',\n                      },\n                      {\n                        key: UserStatus.InProgress,\n                        value: UserStatus.InProgress,\n                        text: 'InProgress',\n                      },\n                      {\n                        key: UserStatus.IsWaiting,\n                        value: UserStatus.IsWaiting,\n                        text: 'Waiting',\n                      },\n                    ]}\n                  />\n                  <br />\n                  {!!getInProgressUsersCount && `#${getInProgressUsersCount}`}\n                </Table.HeaderCell>\n                <Table.HeaderCell>Version</Table.HeaderCell>\n\n                <Table.HeaderCell\n                  className={'weekly-summary'}\n                  textAlign='center'\n                >\n                  Weekly Summary\n                  <br />\n                  (Bonus + Earnings = Total)\n                </Table.HeaderCell>\n                <Table.HeaderCell\n                  className={'weekly-progress'}\n                  textAlign='center'\n                >\n                  Weekly Progress\n                </Table.HeaderCell>\n                <Table.HeaderCell\n                  textAlign='center'\n                  className={'bets'}>\n                  Bets\n                </Table.HeaderCell>\n                <Table.HeaderCell\n                  className={'last-update'}\n                  textAlign='right'>\n                  Active\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {state.data?.map((user, index) => {\n\n                const userStatus = GetUserStatus(user);\n                const isWaiting = userStatus === UserStatus.IsWaiting;\n                const lastUpdate = moment(user.updatedAt || user.createdAt);\n                const duration = moment.duration(lastUpdate.diff(Date.now()));\n                const minutesPassed = Math.abs(duration.asMinutes());\n\n                let totalStaked =\n                  user.data?.weekStatus?.betSummary?.betSummary.totalStaked ||\n                  0;\n                let totalEarnings =\n                  user.data?.weekStatus?.betSummary?.betSummary.totalEarnings ||\n                  0;\n                let bonus =\n                  user.data?.weekStatus?.betSummary?.betSummary.bonus || 0;\n                let winnings =\n                  user.data?.weekStatus?.betSummary?.betSummary.winnings || 0;\n\n                if (isWaiting) {\n                  totalStaked = 0;\n                  totalEarnings = 0;\n                  bonus = 0;\n                  winnings = 0;\n                }\n\n                const bgColor =\n                  minutesPassed > 30\n                    ? GetColor(29)\n                    : GetColor(Math.floor(minutesPassed));\n\n                const checkedUsed = accounts.find(\n                  (item) => item.build === user.build,\n                );\n\n                const selectedUsers = accounts\n                  .filter((item) => item.checked)\n                  .map((item) => item.build);\n\n                const emailArr = selected?.split(',') || [];\n\n                return (\n                  <Table.Row\n                    className={classNames({\n                      selected:\n                        selectedUsers.includes(user.build) ||\n                        emailArr.includes(user._id),\n                    })}\n                    key={user._id}\n                    onClick={handleUserDetails(user)}\n                  >\n                    <Table.Cell\n                      selectable\n                      className={'multi-select'}\n                      textAlign='center'\n                    >\n                      <Checkbox\n                        value={JSON.stringify(user)}\n                        checked={!!checkedUsed?.checked}\n                        onChange={handleSetAccounts}\n                      />\n                    </Table.Cell>\n                    <Table.Cell collapsing>\n                      <span>{user.build}</span>\n                    </Table.Cell>\n                    <Table.Cell\n                      collapsing\n                      textAlign='center'\n                      className={'status'}\n                    >\n                      {!state.loading &&\n                        [userStatus].map((s, statusInd) => {\n                          let animation = star;\n                          let color = 'greenyellow';\n                          if (s === UserStatus.InProgress) {\n                            animation = activity;\n                            color = '#fbbd08';\n                          } else if (s === UserStatus.IsWaiting) {\n                            animation = alertCircle;\n                            color = '#ff5f5f';\n                          }\n                          return (\n                            <UseAnimations\n                              key={statusInd}\n                              animation={animation}\n                              size={25}\n                              autoplay={true}\n                              strokeColor={color}\n                              loop={true}\n                              speed={0.4}\n                            />\n                          );\n                        })}\n                    </Table.Cell>\n                    <Table.Cell collapsing>{user.data?.version}</Table.Cell>\n\n                    <Table.Cell\n                      textAlign='center'\n                      className={'week-summary'}>\n                      <div className={'week-summary-wrap'}>\n                        <span\n                          className={classNames({\n                            win: bonus > 0,\n                            lose: bonus < 0,\n                          })}\n                        >\n                          {Money(bonus)}\n                        </span>\n                        {' + '}\n                        <span\n                          className={classNames({\n                            win: totalEarnings > 0,\n                            lose: totalEarnings < 0,\n                          })}\n                        >\n                          {Money(totalEarnings)}\n                        </span>\n                        {' = '}\n                        <span\n                          className={classNames({\n                            win: winnings > 0,\n                            lose: winnings < 0,\n                          })}\n                        >\n                          {Money(winnings)}\n                        </span>\n                      </div>\n                    </Table.Cell>\n                    <Table.Cell\n                      textAlign='right'\n                      className={'progress'}>\n                      <Progress\n                        indicating\n                        inverted\n                        success={\n                          user.data?.weekStatus?.done === true &&\n                          totalStaked !== 0\n                        }\n                        precision={0}\n                        value={Math.floor(totalStaked)}\n                        progress={'percent'}\n                        total={380}\n                        label={Money(totalStaked)}\n                      />\n                    </Table.Cell>\n                    <Table.Cell\n                      textAlign='center'\n                      className={'bets'}>\n                      {[\n                        {\n                          open:\n                            user.data.weekStatus?.betSummary?.betSummary\n                              .openBets || 0,\n                          settled:\n                            user.data.weekStatus?.betSummary?.betSummary\n                              .settledBets || 0,\n                        },\n                      ].map(({ open, settled }, betsIndex) => {\n                        return (\n                          <div key={betsIndex}>\n                            <span>{open}</span>\n                            <span>{settled}</span>\n                          </div>\n                        );\n                      })}\n                    </Table.Cell>\n                    <Table.Cell\n                      textAlign='right'\n                      className={'last-login'}>\n                      <span style={{ color: bgColor }}>\n                        {lastUpdate.fromNow()}\n                      </span>\n                    </Table.Cell>\n                  </Table.Row>\n                );\n              })}\n            </Table.Body>\n\n            <Table.Footer>\n              <Table.Row>\n                <Table.HeaderCell colSpan='100'>\n                  Total Users {state.data?.length}\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Footer>\n          </Table>\n        </div>\n        <ElementComponent loading={state.loading} />\n      </Segment>\n      <Outlet />\n    </div>\n  );\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface Props {\n  loading: boolean;\n  content?: string;\n}\n\nclass State {\n  loading = false;\n  content? = \"\";\n\n  constructor(props: Props) {\n    this.loading = props.loading;\n    this.content = props.content;\n  }\n}\n\nexport const ElementComponent = (props: Props) => {\n  const [state, setState] = useState<State>(new State(props));\n\n  useEffect(() => {\n    setState((prevState) => ({ ...prevState, loading: props.loading }));\n  }, [props.loading]);\n\n  return (\n    <Dimmer\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n      {...(state.loading ? { active: true } : {})}\n    >\n      <Loader />\n    </Dimmer>\n  );\n};\n"],"names":["UsersComponent","memo","_currentLocation$repl","_state$data2","_state$data3","_useApi","useApi","API","getUsers","withLoading","_useApi2","_slicedToArray","state","setState","accounts","useMemo","currentLocation","JSON","stringify","window","location","href","navigate","useNavigate","handleUserDetails","useCallbackMemo","user","length","checked","push","concat","_id","relative","replace","includes","handleSetAccounts","useCallback","event","data","stopPropagation","parse","value","foundUser","find","item","build","emails","filter","map","join","selected","replaceAll","split","pop","getInProgressUsersCount","_state$data","_state$data$filter","_user$data","_user$data$weekStatus","inProgress","weekStatus","done","lastUpdate","moment","updatedAt","createdAt","duration","diff","Date","now","minutesPassed","Math","abs","asMinutes","handleStatusFilter","sorted","orderBy","GetUserStatus","prevState","_objectSpread","_jsxs","className","classNames","children","Segment","inverted","_jsx","Icon","size","onClick","reload","name","Table","celled","striped","selectable","compact","Header","Row","HeaderCell","textAlign","Dropdown","text","closeOnChange","onChange","options","key","UserStatus","IsDone","InProgress","IsWaiting","Body","index","_user$data2","_user$data2$weekStatu","_user$data2$weekStatu2","_user$data3","_user$data3$weekStatu","_user$data3$weekStatu2","_user$data4","_user$data4$weekStatu","_user$data4$weekStatu2","_user$data5","_user$data5$weekStatu","_user$data5$weekStatu2","_user$data6","_user$data7","_user$data7$weekStatu","_user$data$weekStatus2","_user$data$weekStatus3","_user$data$weekStatus4","_user$data$weekStatus5","userStatus","isWaiting","totalStaked","betSummary","totalEarnings","bonus","winnings","bgColor","GetColor","floor","checkedUsed","selectedUsers","emailArr","Cell","Checkbox","collapsing","loading","s","statusInd","animation","star","color","activity","alertCircle","UseAnimations","autoplay","strokeColor","loop","speed","version","win","lose","Money","Progress","indicating","success","precision","progress","total","label","open","openBets","settled","settledBets","_ref","betsIndex","style","fromNow","Footer","colSpan","ElementComponent","Outlet","State","_createClass","props","_classCallCheck","content","this","_useState","useState","_useState2","useEffect","Dimmer","position","top","left","right","bottom","active","Loader"],"sourceRoot":""}