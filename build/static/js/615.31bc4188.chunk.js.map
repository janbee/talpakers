{"version":3,"file":"static/js/615.31bc4188.chunk.js","mappings":"obAWgC,IAE1BA,GAAKC,EAAAA,EAAAA,IAAA,SAAAD,KAAAE,EAAAA,EAAAA,GAAA,KAAAF,GAAA,KACTG,SAAU,EAAK,KACfC,KAAmD,GAAG,KACtDC,kBAA4B,CAAE,IAGnBC,GAAuBC,EAAAA,EAAAA,OAAK,WAAO,IAADC,EAEvCC,EAAiC,QAA5BD,GADUE,EAAAA,EAAAA,MAAbC,SACeC,MAAM,KAAKC,aAAK,IAAAL,OAAA,EAAzBA,EAA2BM,QAAQ,IAAK,IACtDC,GAA0BC,EAAAA,EAAAA,UAAgB,IAAIhB,GAAQiB,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GA8GtB,OA5GAI,EAAAA,EAAAA,YAAU,WACRD,GAAS,SAACE,GAAS,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAS,IAAEnB,SAAS,GAAI,KAGtDqB,EAAAA,EAAAA,GAAS,CACPC,EAAAA,EAAIC,cAAc,CAAEjB,MAAAA,IACpBgB,EAAAA,EAAIE,WAAW,CAAElB,MAAAA,IACjBgB,EAAAA,EAAIG,eAAe,CAAEnB,MAAAA,MAEpBoB,WAAU,SAAAC,GAAkD,IAADC,GAAAb,EAAAA,EAAAA,GAAAY,EAAA,GAA/CE,EAAcD,EAAA,GAAEE,EAASF,EAAA,GAAEG,EAAcH,EAAA,GAG9CI,EAA6B,OAATF,QAAS,IAATA,OAAS,EAATA,EAAWG,QAAO,SAAAC,GAC1C,MAAkC,aAA3BA,EAAKC,mBAA6D,UAAzBD,EAAKE,iBAA0D,UAA3BF,EAAKG,iBAC3F,IACMC,EAAuC,OAAdP,QAAc,IAAdA,OAAc,EAAdA,EAAgBE,QAAO,SAAAC,GACpD,MAAkC,aAA3BA,EAAKC,iBACd,IACAI,QAAQC,IAAI,qDAAsDR,GAClEO,QAAQC,IAAI,0DAA2DF,GAEvE,IAAMG,EAAWC,MAAMC,KAAKD,MAAME,MAASC,kBAAkBC,QAAQC,KACnE,SAACC,GACC,IAAMC,EAAOL,MAASM,OAAO,QACvBC,EAAOP,IAAOK,GAAMG,IAAIJ,EAAY,SACpCK,EAAMT,IAAOO,GAAMD,OAAO,OAC1BI,EAAYV,IAAOO,GAAMD,OAAO,KAChCK,EAAYX,IAAOO,GACtBK,QAAQ,QACRJ,IAAI,EAAG,OACPK,cACGC,EAAUd,IAAOO,GAAMQ,MAAM,QAAQF,cAErCG,EAAY,IAAIC,KAAKN,GACrBO,EAAU,IAAID,KAAKH,GACzBE,EAAUG,YAAY,EAAG,EAAG,EAAG,GAC/BD,EAAQC,YAAY,GAAI,GAAI,GAAI,KAEhC,IAAMC,EAA2B,OAAdnC,QAAc,IAAdA,OAAc,EAAdA,EAAgBoC,MAAK,SAAC/B,GACvC,OACEA,EAAKqB,YAAcK,EAAUH,eAC7BvB,EAAKwB,UAAYI,EAAQL,eACzBvB,EAAKe,OAASiB,SAASjB,EAAM,GAEjC,IAKMkB,EAA8B,OAAjBnC,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBiC,MAAK,SAAA/B,GACzC,IAAMkC,EAAsBxB,IAAOV,EAAKkC,qBAAqBC,SAAS,EAAG,QACzE,OAAOD,EAAoBE,QAAQV,IAAcQ,EAAoBG,SAAST,EAChF,IAKMU,EAAwC,OAAtBlC,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwB2B,MAAK,SAAA/B,GACnD,IAAMkC,EAAsBxB,IAAOV,EAAKkC,qBACxC,OAAOA,EAAoBE,QAAQV,IAAcQ,EAAoBG,SAAST,EAChF,IAEIW,GAAqB,OAAVT,QAAU,IAAVA,OAAU,EAAVA,EAAYA,WAAWS,WAAY,EAMlD,OAJGN,GAAcH,IACfS,EAAWN,EAAWO,SAAoB,OAAVV,QAAU,IAAVA,OAAU,EAAVA,EAAYA,WAAWW,gBAAiB,IAGnE,CACLC,IAAI,GAADC,OAAKxB,EAAG,KAAAwB,OAAI7B,GACfK,IAAKC,EAAY,IAAMD,EACvBJ,KAAAA,EACAM,UAAWK,EAAUH,cACrBC,QAASI,EAAQL,cACjBqB,OAAiB,OAAVX,QAAU,IAAVA,OAAU,EAAVA,EAAYO,UAAoB,OAAVV,QAAU,IAAVA,OAAU,EAAVA,EAAYA,WAAWc,QAAS,EAC7DC,aAAuB,OAAVf,QAAU,IAAVA,OAAU,EAAVA,EAAYA,WAAWe,cAAe,EACnDJ,eAAyB,OAAVX,QAAU,IAAVA,OAAU,EAAVA,EAAYA,WAAWW,gBAAiB,EACvDF,SAAAA,EACAzE,SAAS,EACTgF,MAAO,EACPC,MAAO5B,EACP6B,WAAYV,EAEhB,IAEIW,GAAkBC,EAAAA,EAAAA,SAAQ3C,EAAU,OACpC4C,EAAcC,OAAOxC,KAAKqC,GAAiBpC,KAAI,SAACwC,GACpD,MAAO,CACLN,MAAOM,EAAI9E,MAAM,KAAK,GACtB+E,KAAML,EAAgBI,GAE1B,IAEAhD,QAAQC,IAAI,uDAAwD6C,GAEpE,IAAMnF,GAAoBuF,EAAAA,EAAAA,OAAMJ,GAAa,SAACnD,GAC5C,OAAOuD,EAAAA,EAAAA,OAAMvD,EAAKsD,KAAM,WAC1B,IAEAvE,GAAS,SAACE,GAAS,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdD,GAAS,IACZnB,SAAS,EACTE,kBAAAA,EACAD,KAAMoF,GAAW,GAErB,GACJ,GAAG,CAAC/E,KAGFoF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,MAACC,EAAAA,EAAO,CAACC,UAAQ,EAAAH,SAAA,EACfC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAClBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOtF,KACPuF,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACGhD,MAASM,OAAO,QAAQ,aACzBwC,EAAAA,EAAAA,KAAA,QACEC,UAAWK,IAAW,CACpBvB,SAAUzD,EAAMd,kBAAoB,EACpC+F,OAAQjF,EAAMd,kBAAoB,IACjC0F,SAEF,KAAMM,EAAAA,EAAAA,IAAMlF,EAAMd,4BAIzBwF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4BAA2BC,SACvC5E,EAAMf,KAAK8C,KAAI,SAACM,GACf,IAAM8C,GAAQV,EAAAA,EAAAA,OAAMpC,EAAImC,KAAM,YAC9B,OACEK,EAAAA,EAAAA,MAAA,OAEEF,UAAU,WAAUC,SAAA,EACpBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CACLC,GAAG,KACHN,UAAQ,EAAAH,SACPvC,EAAI4B,SAEPS,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CACLT,UAAWK,IAAW,CACpBvB,SAAU0B,EAAQ,EAClBF,OAAQE,EAAQ,IAElBE,GAAG,KACHN,UAAQ,EAAAH,UAEPM,EAAAA,EAAAA,IAAMC,SAGXT,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SACvBvC,EAAImC,KAAKzC,KAAI,SAACb,GACb,OACE2D,EAAAA,EAAAA,MAAA,OAEEF,UAAU,OAAMC,SAAA,GAGb1D,EAAKgD,aACNW,EAAAA,EAAAA,MAACS,EAAAA,EAAK,CACJC,GAAG,QACHC,SAAS,aACTC,SAASf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAmBC,SAAA,EAE3CF,EAAAA,EAAAA,KAACY,EAAAA,EAAMF,OAAM,CAAAR,SAAC,gBACdF,EAAAA,EAAAA,KAACY,EAAAA,EAAMI,QAAO,CAAAd,UACXM,EAAAA,EAAAA,IAAMhE,EAAKgD,WAAWR,cAO7BgB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACGhD,IAAOV,EAAKqB,WAAWoD,MAAMzD,OAAO,UAAU,KAAG,IACjDN,IAAOV,EAAKwB,SAASiD,MAAMzD,OAAO,gBAGvC2C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,YACNF,EAAAA,EAAAA,KAAA,QAAAE,UAAOM,EAAAA,EAAAA,IAAMhE,EAAK6C,mBAEpBc,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,cACNF,EAAAA,EAAAA,KAAA,QAAAE,UAAOM,EAAAA,EAAAA,IAAMhE,EAAKyC,qBAEpBkB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,WACNF,EAAAA,EAAAA,KAAA,QAAAE,UAAOM,EAAAA,EAAAA,IAAMhE,EAAK4C,aAEpBe,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,cACNF,EAAAA,EAAAA,KAAA,QACEC,UAAWK,IAAW,CACpBvB,SAAUvC,EAAKuC,SAAW,EAC1BwB,OAAQ/D,EAAKuC,SAAW,IACvBmB,UAEFM,EAAAA,EAAAA,IAAMhE,EAAKuC,oBA9CbvC,EAAK0C,IAoDhB,QA5EGvB,EAAI4B,MAgFf,OAEFS,EAAAA,EAAAA,KAACkB,EAAAA,EAAgB,CAAC5G,QAASgB,EAAMhB,cAIzC,I,+JCzOMH,GAAKC,EAAAA,EAAAA,IAIT,SAAAD,EAAYgH,IAAc9G,EAAAA,EAAAA,GAAA,KAAAF,GAAA,KAH1BG,SAAU,EAAM,KAChB8G,QAAW,GAGTC,KAAK/G,QAAU6G,EAAM7G,QACrB+G,KAAKD,QAAUD,EAAMC,OACvB,IAGWF,EAAmB,SAACC,GAC/B,IAAAjG,GAA0BC,EAAAA,EAAAA,UAAgB,IAAIhB,EAAMgH,IAAO/F,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAMtB,OAJAI,EAAAA,EAAAA,YAAU,WACRD,GAAS,SAACE,GAAS,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAS,IAAEnB,QAAS6G,EAAM7G,SAAO,GACjE,GAAG,CAAC6G,EAAM7G,WAGR0F,EAAAA,EAAAA,KAACsB,EAAAA,GAAM5F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACL6F,MAAO,CACLT,SAAU,WACVU,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,IAELrG,EAAMhB,QAAU,CAAEsH,QAAQ,GAAS,CAAC,GAAC,IAAA1B,UAE1CF,EAAAA,EAAAA,KAAC6B,EAAAA,EAAM,MAGb,C","sources":["app/components/user-details/user-details.component.tsx","app/shared/component/element-loader.component.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from 'react';\nimport './user-details.component.scss';\nimport { Header, Popup, Segment } from 'semantic-ui-react';\nimport { EarningsModel } from '@models/custom.models';\nimport { API } from '@services/api.service';\nimport { ElementComponent } from '@app/shared/component/element-loader.component';\nimport { groupBy, sumBy } from 'lodash';\nimport moment from 'moment';\nimport { useLocation } from 'react-router-dom';\nimport { Money } from '@utilities/utils';\nimport classNames from 'classnames';\nimport { forkJoin } from 'rxjs';\n\nclass State {\n  loading = true;\n  list: { title: string; data: EarningsModel[] }[] = [];\n  yearTotalWinnings: number = 0;\n}\n\nexport const UserDetailsComponent = memo(() => {\n  const { pathname } = useLocation();\n  const email = pathname.split('/').pop()?.replace('@', '');\n  const [state, setState] = useState<State>(new State());\n\n  useEffect(() => {\n    setState((prevState) => ({ ...prevState, loading: true }));\n\n\n    forkJoin([\n      API.getBetSummary({ email }),\n      API.getBonuses({ email }),\n      API.getWithdrawals({ email })],\n    )\n      .subscribe(([betSummaryList, bonusList, withdrawalList]) => {\n\n\n        const filteredBonusList = bonusList?.filter(item => {\n          return item.TransactionStatus === 'Approved' && item.TransactionType === 'Bonus' && item.PaymentMethodInfo === 'Bonus';\n        });\n        const filteredWithdrawalList = withdrawalList?.filter(item => {\n          return item.TransactionStatus === 'Approved';\n        });\n        console.log('gaga-------------------------------bonusList------', filteredBonusList);\n        console.log('gaga-------------------------------withdrawalList------', filteredWithdrawalList);\n\n        const dataList = Array.from(Array(moment().isoWeeksInYear()).keys()).map(\n          (weekNumber) => {\n            const year = moment().format('YYYY');\n            const date = moment(year).add(weekNumber, 'weeks');\n            const mon = moment(date).format('MMM');\n            const monNumber = moment(date).format('M');\n            const startDate = moment(date)\n              .startOf('week')\n              .add(1, 'day')\n              .toISOString();\n            const endDate = moment(date).endOf('week').toISOString();\n\n            const weekStart = new Date(startDate);\n            const weekEnd = new Date(endDate);\n            weekStart.setUTCHours(0, 0, 0, 0);\n            weekEnd.setUTCHours(23, 59, 59, 999);\n\n            const betSummary = betSummaryList?.find((item) => {\n              return (\n                item.startDate === weekStart.toISOString() &&\n                item.endDate === weekEnd.toISOString() &&\n                item.year === parseInt(year, 10)\n              );\n            });\n\n            /*\n            * get bonus\n            * */\n            const foundBonus = filteredBonusList?.find(item => {\n              const TransactionDateTime = moment(item.TransactionDateTime).subtract(7, 'days')\n              return TransactionDateTime.isAfter(weekStart) && TransactionDateTime.isBefore(weekEnd)\n            })\n\n            /*\n            * get withdrawal\n            * */\n            const foundWithdrawal = filteredWithdrawalList?.find(item => {\n              const TransactionDateTime = moment(item.TransactionDateTime);\n              return TransactionDateTime.isAfter(weekStart) && TransactionDateTime.isBefore(weekEnd)\n            })\n\n            let winnings = betSummary?.betSummary.winnings || 0;\n\n            if(foundBonus && betSummary) {\n              winnings = foundBonus.Amount + (betSummary?.betSummary.totalEarnings || 0)\n            }\n\n            return {\n              _id: `${mon}-${weekNumber}`,\n              mon: monNumber + '-' + mon,\n              year,\n              startDate: weekStart.toISOString(),\n              endDate: weekEnd.toISOString(),\n              bonus: foundBonus?.Amount || betSummary?.betSummary.bonus || 0,\n              totalStaked: betSummary?.betSummary.totalStaked || 0,\n              totalEarnings: betSummary?.betSummary.totalEarnings || 0,\n              winnings,\n              loading: false,\n              fetch: 0,\n              title: mon,\n              withdrawal: foundWithdrawal,\n            };\n          },\n        );\n        const groupedDataList = groupBy(dataList, 'mon');\n        const defaultList = Object.keys(groupedDataList).map((key) => {\n          return {\n            title: key.split('-')[1],\n            data: groupedDataList[key] as unknown as EarningsModel[],\n          };\n        });\n\n        console.log('gaga----------------------------defaultList---------', defaultList);\n\n        const yearTotalWinnings = sumBy(defaultList, (item) => {\n          return sumBy(item.data, 'winnings');\n        });\n\n        setState((prevState) => ({\n          ...prevState,\n          loading: false,\n          yearTotalWinnings,\n          list: defaultList,\n        }));\n      });\n  }, [email]);\n\n  return (\n    <div className='user-details-wrap'>\n      <Segment inverted>\n        <div className='ttl'>\n          <span>{email}</span>\n          <span>\n            {moment().format('YYYY')} earnings\n            <span\n              className={classNames({\n                winnings: state.yearTotalWinnings > 0,\n                losses: state.yearTotalWinnings < 0,\n              })}\n            >\n              {' ' + Money(state.yearTotalWinnings)}\n            </span>\n          </span>\n        </div>\n        <hr />\n        <div className='user-details-content-wrap'>\n          {state.list.map((mon) => {\n            const total = sumBy(mon.data, 'winnings');\n            return (\n              <div\n                key={mon.title}\n                className='mon-wrap'>\n                <div className='ttl-wrap'>\n                  <Header\n                    as='h3'\n                    inverted>\n                    {mon.title}\n                  </Header>\n                  <Header\n                    className={classNames({\n                      winnings: total > 0,\n                      losses: total < 0,\n                    })}\n                    as='h4'\n                    inverted\n                  >\n                    {Money(total)}\n                  </Header>\n                </div>\n                <hr />\n                <div className='week-wrap'>\n                  {mon.data.map((item) => {\n                    return (\n                      <div\n                        key={item._id}\n                        className='week'>\n\n\n                        {!!item.withdrawal && (\n                          <Popup\n                            on='click'\n                            position='top center'\n                            trigger={<div className='has-withdrawal'/>}\n                          >\n                            <Popup.Header>Withdrawal</Popup.Header>\n                            <Popup.Content>\n                              {Money(item.withdrawal.Amount)}\n                            </Popup.Content>\n                          </Popup>\n\n                        )}\n\n\n                        <div className='week-date'>\n                          <span>\n                            {moment(item.startDate).utc().format('ddd DD')} -{' '}\n                            {moment(item.endDate).utc().format('ddd DD')}\n                          </span>\n                        </div>\n                        <div className='week-content'>\n                          <div className='row-wrap'>\n                            <span>Staked</span>\n                            <span>{Money(item.totalStaked)}</span>\n                          </div>\n                          <div className='row-wrap'>\n                            <span>Earnings</span>\n                            <span>{Money(item.totalEarnings)}</span>\n                          </div>\n                          <div className='row-wrap'>\n                            <span>Bonus</span>\n                            <span>{Money(item.bonus)}</span>\n                          </div>\n                          <div className='row-wrap'>\n                            <span>Winnings</span>\n                            <span\n                              className={classNames({\n                                winnings: item.winnings > 0,\n                                losses: item.winnings < 0,\n                              })}\n                            >\n                              {Money(item.winnings)}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <ElementComponent loading={state.loading} />\n      </Segment>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface Props {\n  loading: boolean;\n  content?: string;\n}\n\nclass State {\n  loading = false;\n  content? = \"\";\n\n  constructor(props: Props) {\n    this.loading = props.loading;\n    this.content = props.content;\n  }\n}\n\nexport const ElementComponent = (props: Props) => {\n  const [state, setState] = useState<State>(new State(props));\n\n  useEffect(() => {\n    setState((prevState) => ({ ...prevState, loading: props.loading }));\n  }, [props.loading]);\n\n  return (\n    <Dimmer\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n      {...(state.loading ? { active: true } : {})}\n    >\n      <Loader />\n    </Dimmer>\n  );\n};\n"],"names":["State","_createClass","_classCallCheck","loading","list","yearTotalWinnings","UserDetailsComponent","memo","_pathname$split$pop","email","useLocation","pathname","split","pop","replace","_useState","useState","_useState2","_slicedToArray","state","setState","useEffect","prevState","_objectSpread","forkJoin","API","getBetSummary","getBonuses","getWithdrawals","subscribe","_ref","_ref2","betSummaryList","bonusList","withdrawalList","filteredBonusList","filter","item","TransactionStatus","TransactionType","PaymentMethodInfo","filteredWithdrawalList","console","log","dataList","Array","from","moment","isoWeeksInYear","keys","map","weekNumber","year","format","date","add","mon","monNumber","startDate","startOf","toISOString","endDate","endOf","weekStart","Date","weekEnd","setUTCHours","betSummary","find","parseInt","foundBonus","TransactionDateTime","subtract","isAfter","isBefore","foundWithdrawal","winnings","Amount","totalEarnings","_id","concat","bonus","totalStaked","fetch","title","withdrawal","groupedDataList","groupBy","defaultList","Object","key","data","sumBy","_jsx","className","children","_jsxs","Segment","inverted","classNames","losses","Money","total","Header","as","Popup","on","position","trigger","Content","utc","ElementComponent","props","content","this","Dimmer","style","top","left","right","bottom","active","Loader"],"sourceRoot":""}