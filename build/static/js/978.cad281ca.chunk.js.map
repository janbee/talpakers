{"version":3,"file":"static/js/978.cad281ca.chunk.js","mappings":"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","sources":["app/components/users/users.component.tsx","app/shared/component/element-loader.component.tsx"],"sourcesContent":["import React, {\n  FormEvent,\n  memo,\n  SyntheticEvent,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport \"./users.component.scss\";\nimport {\n  Checkbox,\n  CheckboxProps,\n  Dropdown,\n  DropdownProps,\n  Icon,\n  Progress,\n  Segment,\n  Table,\n} from \"semantic-ui-react\";\nimport {\n  GetColor,\n  GetUserStatus,\n  Money,\n  useApi,\n  useCallbackMemo,\n  UserStatus,\n} from \"@utilities/utils\";\nimport { UserDetailModel } from \"@models/custom.models\";\nimport { API } from \"@services/api.service\";\nimport moment from \"moment\";\nimport { Outlet, useNavigate } from \"react-router-dom\";\nimport { ElementComponent } from \"@app/shared/component/element-loader.component\";\nimport classNames from \"classnames\";\nimport UseAnimations from \"react-useanimations\";\nimport activity from \"react-useanimations/lib/activity\";\nimport alertCircle from \"react-useanimations/lib/alertCircle\";\nimport star from \"react-useanimations/lib/star\";\n\ninterface CustomUserModel extends UserDetailModel {\n  checked?: boolean;\n  visible?: boolean;\n}\n\nexport const UsersComponent = memo(() => {\n  const [state, setState] = useApi<CustomUserModel[]>(() => API.getUsers(), {\n    withLoading: false,\n  });\n\n  const accounts = useMemo<CustomUserModel[]>(() => {\n    return [];\n  }, []);\n\n  /*\n   * commit\n   * */\n  const currentLocation = JSON.stringify(window.location.href);\n  const navigate = useNavigate();\n\n  const handleUserDetails = useCallbackMemo(\n    (user: CustomUserModel) => {\n      accounts.length = 0;\n      user.checked = true;\n      accounts.push(user);\n      navigate(`@${user._id}`, {\n        relative: \"route\",\n        replace: currentLocation.includes(\"@\"),\n      });\n    },\n    [navigate],\n  );\n\n  const handleSetAccounts = useCallback(\n    (event: FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n      event.stopPropagation();\n      const user = JSON.parse(data.value as string) as CustomUserModel;\n\n      const foundUser = accounts.find((item) => item.build === user.build);\n      if (foundUser) {\n        foundUser.checked = data.checked;\n      } else {\n        user.checked = data.checked;\n        accounts.push(user);\n      }\n\n      const emails = accounts\n        .filter((item) => item.checked === true)\n        .map((item) => item._id)\n        .join(\",\");\n\n      navigate(emails?.length === 0 ? \"\" : `@${emails}`, {\n        relative: \"route\",\n        replace: currentLocation.includes(\"@\"),\n      });\n    },\n    [accounts, currentLocation, navigate],\n  );\n\n  const selected = currentLocation\n    .replaceAll('\"', \"\")\n    .split(\"/\")\n    .pop()\n    ?.replace(\"@\", \"\");\n\n  const getInProgressUsersCount = useMemo(() => {\n    return (\n      state.data?.filter((user) => {\n        const inProgress = user.data?.weekStatus?.done === false;\n        const lastUpdate = moment(user.updatedAt || user.createdAt);\n        const duration = moment.duration(lastUpdate.diff(Date.now()));\n        const minutesPassed = Math.abs(duration.asMinutes());\n        return inProgress && minutesPassed < 30;\n      })?.length || 0\n    );\n  }, [state.data]);\n\n  const handleStatusFilter = useCallback(\n    (event: SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => {\n      state.data?.forEach((user) => {\n        const userStatus = GetUserStatus(user);\n        user.visible = userStatus === data.value;\n      });\n      setState((prevState) => ({ ...prevState, data: state.data }));\n    },\n    [state.data],\n  );\n\n  return (\n    <div\n      className={classNames({\n        \"users-wrap\": true,\n      })}\n    >\n      <Segment inverted>\n        <div className=\"ttl\">\n          <div>\n            <span>Users</span>\n            {!!accounts.length && (\n              <span>({accounts.filter((item) => item.checked).length})</span>\n            )}\n          </div>\n          <Icon\n            size={\"small\"}\n            className={\"pointer\"}\n            onClick={state.reload}\n            name=\"refresh\"\n          />\n        </div>\n        <hr />\n        <div className=\"tbl-wrap\">\n          <Table celled striped selectable inverted compact>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell className={\"multi-select\"} textAlign=\"center\">\n                  #\n                </Table.HeaderCell>\n                <Table.HeaderCell>App</Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"center\" className={\"status\"}>\n                  <Dropdown\n                    text=\"Status\"\n                    closeOnChange={false}\n                    onChange={handleStatusFilter}\n                    options={[\n                      {\n                        key: UserStatus.IsDone,\n                        value: UserStatus.IsDone,\n                        text: \"Done\",\n                      },\n                      {\n                        key: UserStatus.InProgress,\n                        value: UserStatus.InProgress,\n                        text: \"InProgress\",\n                      },\n                      {\n                        key: UserStatus.IsWaiting,\n                        value: UserStatus.IsWaiting,\n                        text: \"Waiting\",\n                      },\n                    ]}\n                  />\n                  <br />\n                  {!!getInProgressUsersCount && `#${getInProgressUsersCount}`}\n                </Table.HeaderCell>\n                <Table.HeaderCell>Version</Table.HeaderCell>\n\n                <Table.HeaderCell\n                  className={\"weekly-summary\"}\n                  textAlign=\"center\"\n                >\n                  Weekly Summary\n                  <br />\n                  (Bonus + Earnings = Total)\n                </Table.HeaderCell>\n                <Table.HeaderCell\n                  className={\"weekly-progress\"}\n                  textAlign=\"center\"\n                >\n                  Weekly Progress\n                </Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"center\" className={\"bets\"}>\n                  Bets\n                </Table.HeaderCell>\n                <Table.HeaderCell className={\"last-update\"} textAlign=\"right\">\n                  Active\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {state.data?.map((user, index) => {\n                if (user.visible === false) return null;\n\n                const userStatus = GetUserStatus(user);\n                const isWaiting = userStatus === UserStatus.IsWaiting;\n                const lastUpdate = moment(user.updatedAt || user.createdAt);\n                const duration = moment.duration(lastUpdate.diff(Date.now()));\n                const minutesPassed = Math.abs(duration.asMinutes());\n\n                let totalStaked =\n                  user.data?.weekStatus?.betSummary?.betSummary.totalStaked ||\n                  0;\n                let totalEarnings =\n                  user.data?.weekStatus?.betSummary?.betSummary.totalEarnings ||\n                  0;\n                let bonus =\n                  user.data?.weekStatus?.betSummary?.betSummary.bonus || 0;\n                let winnings =\n                  user.data?.weekStatus?.betSummary?.betSummary.winnings || 0;\n\n                if (isWaiting) {\n                  totalStaked = 0;\n                  totalEarnings = 0;\n                  bonus = 0;\n                  winnings = 0;\n                }\n\n                const bgColor =\n                  minutesPassed > 30\n                    ? GetColor(29)\n                    : GetColor(Math.floor(minutesPassed));\n\n                const checkedUsed = accounts.find(\n                  (item) => item.build === user.build,\n                );\n\n                const selectedUsers = accounts\n                  .filter((item) => item.checked)\n                  .map((item) => item.build);\n\n                const emailArr = selected?.split(\",\") || [];\n\n                return (\n                  <Table.Row\n                    className={classNames({\n                      selected:\n                        selectedUsers.includes(user.build) ||\n                        emailArr.includes(user._id),\n                    })}\n                    key={user._id}\n                    onClick={handleUserDetails(user)}\n                  >\n                    <Table.Cell\n                      selectable\n                      className={\"multi-select\"}\n                      textAlign=\"center\"\n                    >\n                      <Checkbox\n                        value={JSON.stringify(user)}\n                        checked={!!checkedUsed?.checked}\n                        onChange={handleSetAccounts}\n                      />\n                    </Table.Cell>\n                    <Table.Cell collapsing>\n                      <span>{user.build}</span>\n                    </Table.Cell>\n                    <Table.Cell\n                      collapsing\n                      textAlign=\"center\"\n                      className={\"status\"}\n                    >\n                      {!state.loading &&\n                        [userStatus].map((s, statusInd) => {\n                          let animation = star;\n                          let color = \"greenyellow\";\n                          if (s === UserStatus.InProgress) {\n                            animation = activity;\n                            color = \"#fbbd08\";\n                          } else if (s === UserStatus.IsWaiting) {\n                            animation = alertCircle;\n                            color = \"#ff5f5f\";\n                          }\n                          return (\n                            <UseAnimations\n                              key={statusInd}\n                              animation={animation}\n                              size={25}\n                              autoplay={true}\n                              strokeColor={color}\n                              loop={true}\n                            />\n                          );\n                        })}\n                    </Table.Cell>\n                    <Table.Cell collapsing>{user.data?.version}</Table.Cell>\n\n                    <Table.Cell textAlign=\"center\" className={\"week-summary\"}>\n                      <div className={\"week-summary-wrap\"}>\n                        <span\n                          className={classNames({\n                            win: bonus > 0,\n                            lose: bonus < 0,\n                          })}\n                        >\n                          {Money(bonus)}\n                        </span>\n                        {\" + \"}\n                        <span\n                          className={classNames({\n                            win: totalEarnings > 0,\n                            lose: totalEarnings < 0,\n                          })}\n                        >\n                          {Money(totalEarnings)}\n                        </span>\n                        {\" = \"}\n                        <span\n                          className={classNames({\n                            win: winnings > 0,\n                            lose: winnings < 0,\n                          })}\n                        >\n                          {Money(winnings)}\n                        </span>\n                      </div>\n                    </Table.Cell>\n                    <Table.Cell textAlign=\"right\" className={\"progress\"}>\n                      <Progress\n                        indicating\n                        inverted\n                        success={\n                          user.data?.weekStatus?.done === true &&\n                          totalStaked !== 0\n                        }\n                        precision={0}\n                        value={Math.floor(totalStaked)}\n                        progress={\"percent\"}\n                        total={380}\n                        label={Money(totalStaked)}\n                      />\n                    </Table.Cell>\n                    <Table.Cell textAlign=\"center\" className={\"bets\"}>\n                      {[\n                        {\n                          open:\n                            user.data.weekStatus?.betSummary?.betSummary\n                              .openBets || 0,\n                          settled:\n                            user.data.weekStatus?.betSummary?.betSummary\n                              .settledBets || 0,\n                        },\n                      ].map(({ open, settled }, betsIndex) => {\n                        return (\n                          <div key={betsIndex}>\n                            <span>{open}</span>\n                            <span>{settled}</span>\n                          </div>\n                        );\n                      })}\n                    </Table.Cell>\n                    <Table.Cell textAlign=\"right\" className={\"last-login\"}>\n                      <span style={{ color: bgColor }}>\n                        {lastUpdate.fromNow()}\n                      </span>\n                    </Table.Cell>\n                  </Table.Row>\n                );\n              })}\n            </Table.Body>\n\n            <Table.Footer>\n              <Table.Row>\n                <Table.HeaderCell colSpan=\"100\">\n                  Total Users {state.data?.length}\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Footer>\n          </Table>\n        </div>\n        <ElementComponent loading={state.loading} />\n      </Segment>\n      <Outlet />\n    </div>\n  );\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\ninterface Props {\n  loading: boolean;\n  content?: string;\n}\n\nclass State {\n  loading = false;\n  content? = \"\";\n\n  constructor(props: Props) {\n    this.loading = props.loading;\n    this.content = props.content;\n  }\n}\n\nexport const ElementComponent = (props: Props) => {\n  const [state, setState] = useState<State>(new State(props));\n\n  useEffect(() => {\n    setState((prevState) => ({ ...prevState, loading: props.loading }));\n  }, [props.loading]);\n\n  return (\n    <Dimmer\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n      {...(state.loading ? { active: true } : {})}\n    >\n      <Loader />\n    </Dimmer>\n  );\n};\n"],"names":["UsersComponent","memo","_currentLocation$repl","_state$data3","_state$data4","_useApi","useApi","API","getUsers","withLoading","_useApi2","_slicedToArray","state","setState","accounts","useMemo","currentLocation","JSON","stringify","window","location","href","navigate","useNavigate","handleUserDetails","useCallbackMemo","user","length","checked","push","concat","_id","relative","replace","includes","handleSetAccounts","useCallback","event","data","stopPropagation","parse","value","foundUser","find","item","build","emails","filter","map","join","selected","replaceAll","split","pop","getInProgressUsersCount","_state$data","_state$data$filter","_user$data","_user$data$weekStatus","inProgress","weekStatus","done","lastUpdate","moment","updatedAt","createdAt","duration","diff","Date","now","minutesPassed","Math","abs","asMinutes","handleStatusFilter","_state$data2","forEach","userStatus","GetUserStatus","visible","prevState","_objectSpread","_jsxs","className","classNames","children","Segment","inverted","_jsx","Icon","size","onClick","reload","name","Table","celled","striped","selectable","compact","Header","Row","HeaderCell","textAlign","Dropdown","text","closeOnChange","onChange","options","key","UserStatus","IsDone","InProgress","IsWaiting","Body","index","_user$data2","_user$data2$weekStatu","_user$data2$weekStatu2","_user$data3","_user$data3$weekStatu","_user$data3$weekStatu2","_user$data4","_user$data4$weekStatu","_user$data4$weekStatu2","_user$data5","_user$data5$weekStatu","_user$data5$weekStatu2","_user$data6","_user$data7","_user$data7$weekStatu","_user$data$weekStatus2","_user$data$weekStatus3","_user$data$weekStatus4","_user$data$weekStatus5","isWaiting","totalStaked","betSummary","totalEarnings","bonus","winnings","bgColor","GetColor","floor","checkedUsed","selectedUsers","emailArr","Cell","Checkbox","collapsing","loading","s","statusInd","animation","star","color","activity","alertCircle","UseAnimations","autoplay","strokeColor","loop","version","win","lose","Money","Progress","indicating","success","precision","progress","total","label","open","openBets","settled","settledBets","_ref","betsIndex","style","fromNow","Footer","colSpan","ElementComponent","Outlet","State","_createClass","props","_classCallCheck","content","this","_useState","useState","_useState2","useEffect","Dimmer","position","top","left","right","bottom","active","Loader"],"sourceRoot":""}