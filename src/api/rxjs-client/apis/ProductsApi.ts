// tslint:disable
/**
 * Akrochem ERP API
 * Akrochem API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    Product,
} from '../models';

export interface GetProductByIdRequest {
    productId: string;
}

export interface GetProductsRequest {
    offset?: number;
    limit?: number;
    locationId?: string;
    status?: GetProductsStatusEnum;
    q?: string;
}

/**
 * no description
 */
export class ProductsApi extends BaseAPI {

    /**
     * Returns a single product
     * Retrieve a specific product
     */
    getProductById({ productId }: GetProductByIdRequest): Observable<Product>
    getProductById({ productId }: GetProductByIdRequest, opts?: OperationOpts): Observable<AjaxResponse<Product>>
    getProductById({ productId }: GetProductByIdRequest, opts?: OperationOpts): Observable<Product | AjaxResponse<Product>> {
        throwIfNullOrUndefined(productId, 'productId', 'getProductById');

        return this.request<Product>({
            url: '/products/{productId}'.replace('{productId}', encodeURI(productId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Returns a list of all products
     * Retrieve a list of products
     */
    getProducts({ offset, limit, locationId, status, q }: GetProductsRequest): Observable<Array<Product>>
    getProducts({ offset, limit, locationId, status, q }: GetProductsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Product>>>
    getProducts({ offset, limit, locationId, status, q }: GetProductsRequest, opts?: OperationOpts): Observable<Array<Product> | AjaxResponse<Array<Product>>> {

        const query: HttpQuery = {};

        if (offset != null) { query['offset'] = offset; }
        if (limit != null) { query['limit'] = limit; }
        if (locationId != null) { query['locationId'] = locationId; }
        if (status != null) { query['status'] = status; }
        if (q != null) { query['q'] = q; }

        return this.request<Array<Product>>({
            url: '/products',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetProductsStatusEnum {
    Active = 'ACTIVE',
    Rejected = 'REJECTED',
    PendingApproval = 'PENDING_APPROVAL',
    Discontinued = 'DISCONTINUED',
    Approved = 'APPROVED'
}
